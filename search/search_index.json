{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to VidarDB VidarDB is actively developed and maintained by VidarDB Team. It is built on RocksDB and earlier work on LevelDB by Sanjay Ghemawat (sanjay@google.com) and Jeff Dean (jeff@google.com).","title":"Welcome to VidarDB"},{"location":"#welcome-to-vidardb","text":"VidarDB is actively developed and maintained by VidarDB Team. It is built on RocksDB and earlier work on LevelDB by Sanjay Ghemawat (sanjay@google.com) and Jeff Dean (jeff@google.com).","title":"Welcome to VidarDB"},{"location":"run_vidarDB_in_docker/","text":"Run VidarDB in Docker We can easily deploy PostgreSQL with VidarDB in a Docker container. The following document will guide you to install and play with VidarDB in one minute. Requirement Docker is the only requirement. Install it at https://docs.docker.com/install/ . Run a VidarDB's Docker container Before running any of the following commands, please ensure that both the container name postgresql and the port 5432 have not been used in your environment. To run a VidarDB's Docker container: docker run -d --name postgresql -p 5432:5432 vidardb/postgresql:vidardb-latest After doing that, a postgresql container will start and the database will be initialized. Connect to the PostgreSQL psql -h 127.0.0.1 -p 5432 -U postgres A welcome from the PostgreSQL should appear. Please note that the PostgreSQL client should already be installed before running the container. For the users who don't have the PostgreSQL client installed: docker exec -it postgresql /bin/bash Then we can connect to the PostgreSQL successfully inside the container (retry the connecting command again). Building your own Docker image You may want to create your custom Docker image. Do it by '1-click': # Building a Docker image with the default name 'vidardb/postgresql:vidardb-latest' make docker-image Some available build parameters: REGISTRY=<YOUR REGISTRY ADDRESS> IMAGE=<YOUR IMAGE NAME> TAG=<YOUR IMAGE TAG> make docker-image Enable AI support in your database VidarDB loves AI! Our bulit-in database has already installed MADlib which supports big data machine learning in SQL. If you want to use it in the postgresql container, try the following command: docker exec -it postgresql sh -c \"install-madlib.sh -U <YOUR DATABASE USERNAME> -P <YOUR DATABASE PASSWORD> -D <YOUR DATABASE NAME>\" For example, if you have created a new database named madlib , and the username is madlib and there is no password, then you can simply install madlib like this: docker exec -it postgresql sh -c \"install-madlib.sh -U madlib -D madlib\"","title":"Run VidarDB in Docker"},{"location":"run_vidarDB_in_docker/#run-vidardb-in-docker","text":"We can easily deploy PostgreSQL with VidarDB in a Docker container. The following document will guide you to install and play with VidarDB in one minute.","title":"Run VidarDB in Docker"},{"location":"run_vidarDB_in_docker/#requirement","text":"Docker is the only requirement. Install it at https://docs.docker.com/install/ .","title":"Requirement"},{"location":"run_vidarDB_in_docker/#run-a-vidardbs-docker-container","text":"Before running any of the following commands, please ensure that both the container name postgresql and the port 5432 have not been used in your environment. To run a VidarDB's Docker container: docker run -d --name postgresql -p 5432:5432 vidardb/postgresql:vidardb-latest After doing that, a postgresql container will start and the database will be initialized.","title":"Run a VidarDB's Docker container"},{"location":"run_vidarDB_in_docker/#connect-to-the-postgresql","text":"psql -h 127.0.0.1 -p 5432 -U postgres A welcome from the PostgreSQL should appear. Please note that the PostgreSQL client should already be installed before running the container. For the users who don't have the PostgreSQL client installed: docker exec -it postgresql /bin/bash Then we can connect to the PostgreSQL successfully inside the container (retry the connecting command again).","title":"Connect to the PostgreSQL"},{"location":"run_vidarDB_in_docker/#building-your-own-docker-image","text":"You may want to create your custom Docker image. Do it by '1-click': # Building a Docker image with the default name 'vidardb/postgresql:vidardb-latest' make docker-image Some available build parameters: REGISTRY=<YOUR REGISTRY ADDRESS> IMAGE=<YOUR IMAGE NAME> TAG=<YOUR IMAGE TAG> make docker-image","title":"Building your own Docker image"},{"location":"run_vidarDB_in_docker/#enable-ai-support-in-your-database","text":"VidarDB loves AI! Our bulit-in database has already installed MADlib which supports big data machine learning in SQL. If you want to use it in the postgresql container, try the following command: docker exec -it postgresql sh -c \"install-madlib.sh -U <YOUR DATABASE USERNAME> -P <YOUR DATABASE PASSWORD> -D <YOUR DATABASE NAME>\" For example, if you have created a new database named madlib , and the username is madlib and there is no password, then you can simply install madlib like this: docker exec -it postgresql sh -c \"install-madlib.sh -U madlib -D madlib\"","title":"Enable AI support in your database"}]}